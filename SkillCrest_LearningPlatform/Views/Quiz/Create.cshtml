@model CreateQuizViewModel

<h2>Create Quiz</h2>

<form asp-action="Create" asp-controller="Quiz" method="post">
    @Html.AntiForgeryToken()
    <div>
        <label>Quiz Title</label>
        <input type="text" asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <input type="hidden" asp-for="CourseId" value="@Model.CourseId" />
    <div id="questions-container" class="questions-container">
        @if (Model.Questions != null && Model.Questions.Any())
        {
            for (int i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions[i];
                <div class="question-box" id="question_@i">
                    <div class="question-header">
                        <h4>Question @(i + 1)</h4>
                        <label>Question Text</label>
                        <input type="text" name="Questions[@i].Text" value="@question.Text" class="form-control" />
                        <span asp-validation-for="Questions[@i].Text" class="text-danger"></span>
                        <button type="button" onclick="removeQuestion(@i)" class="btn btn-danger btn-sm">Remove Question</button>
                    </div>

                    <div class="question-type">
                        <label>Question Type</label>
                        <select name="Questions[@i].Type" class="form-control" onchange="toggleAddOptionButton(@i)">
                            @if ((int)question.Type == 0)
                            {
                                <option value="0" selected>MultipleChoice</option>
                            }
                            else
                            {
                                <option value="0">MultipleChoice</option>
                            }

                            @if ((int)question.Type == 1)
                            {
                                <option value="1" selected>RadioButton</option>
                            }
                            else
                            {
                                <option value="1">RadioButton</option>
                            }

                            @if ((int)question.Type == 2)
                            {
                                <option value="2" selected>OpenText</option>
                            }
                            else
                            {
                                <option value="2">OpenText</option>
                            }
                        </select>
                    </div>

                    <!-- Options -->
                    <div class="options-container" id="options_@i">
                        @if (question.Options != null && question.Options.Any())
                        {
                            for (int j = 0; j < question.Options.Count; j++)
                            {
                                var option = question.Options[j];
                                <div class="option-box">
                                    <label>Option Text</label>
                                    <input type="text" name="Questions[@i].Options[@j].Text" value="@option.Text" class="form-control option-input" />
                                    <label>Is Correct</label>
                                    <input type="@((int)question.Type == 1 ? "radio" : "checkbox")"
                                           name="@((int)question.Type == 1 ? $"Questions[@i].IsCorrect" : $"Questions[@i].Options[@j].IsCorrect")"
                                           value="true" @(option.IsCorrect ? "checked" : "") onchange="handleCheckboxChange(this)" />
                                    <button type="button" onclick="removeOption(@i, @j)" class="btn btn-danger btn-sm">Remove Option</button>
                                </div>
                            }
                        }
                    </div>

                    <!-- OpenText Correct Answer -->
                    <div class="open-text-container" id="openText_@i" style="@((int)question.Type == 2 ? "" : "display:none;")">
                        <label>Correct Answer Text</label>
                        <input type="text" name="Questions[@i].CorrectTextResponse" value="@question.CorrectTextResponse" class="form-control" />
                        <span asp-validation-for="Questions[@i].CorrectTextResponse" class="text-danger"></span>
                    </div>

                    <button type="button" class="add-option-button btn btn-info btn-sm" onclick="addOption(@i)">Add Option</button>
                </div>
            }
        }
    </div>

    <button type="button" onclick="addQuestion()" class="btn btn-primary">Add Question</button>
    <button type="submit" class="btn btn-success mt-3">Save Quiz</button>
</form>

@section Scripts {
    <script>
        let questionIndex = @Model.Questions?.Count ?? 0;

        function addQuestion() {
            const questionHtml = `
                <div class="question-box" id="question_${questionIndex}">
                    <div class="question-header">
                        <h4>Question ${questionIndex + 1}</h4>
                        <label>Question Text</label>
                        <input type="text" name="Questions[${questionIndex}].Text" class="form-control" />
                        <button type="button" onclick="removeQuestion(${questionIndex})" class="btn btn-danger btn-sm">Remove Question</button>
                    </div>

                    <div class="question-type">
                        <label>Question Type</label>
                        <select name="Questions[${questionIndex}].Type" class="form-control" onchange="toggleAddOptionButton(${questionIndex})">
                            <option value="0">MultipleChoice</option>
                            <option value="1">RadioButton</option>
                            <option value="2">OpenText</option>
                        </select>
                    </div>

                    <div class="options-container" id="options_${questionIndex}"></div>

                    <div class="open-text-container" id="openText_${questionIndex}" style="display:none;">
                        <label>Correct Answer Text</label>
                        <input type="text" name="Questions[${questionIndex}].CorrectTextResponse" class="form-control" />
                    </div>

                    <button type="button" class="add-option-button btn btn-info btn-sm" onclick="addOption(${questionIndex})">Add Option</button>
                </div>
            `;
            document.getElementById("questions-container").insertAdjacentHTML("beforeend", questionHtml);
            questionIndex++;
        }

        function addOption(questionIdx) {
            const optionsContainer = document.getElementById(`options_${questionIdx}`);
            const optionIndex = optionsContainer.childElementCount;
            const isRadioButton = document.querySelector(`select[name="Questions[${questionIdx}].Type"]`).value === "1";

            const optionHtml = `
                <div class="option-box">
                    <label>Option Text</label>
                    <input type="text" name="Questions[${questionIdx}].Options[${optionIndex}].Text" class="form-control option-input" />
                    <label>Is Correct</label>
                    <input type="${isRadioButton ? 'radio' : 'checkbox'}"
                           name="${isRadioButton ? `Questions[${questionIdx}].Options[${optionIndex}].IsCorrect` : `Questions[${questionIdx}].Options[${optionIndex}].IsCorrect`}"}
                           value="true" onchange="handleCheckboxChange(this, ${questionIdx})" />
                    <button type="button" onclick="removeOption(${questionIdx}, ${optionIndex})" class="btn btn-danger btn-sm">Remove Option</button>
                </div>
            `;
            optionsContainer.insertAdjacentHTML("beforeend", optionHtml);
        }

        function handleCheckboxChange(input, questionIdx) {
            const isRadioButton = document.querySelector(`select[name="Questions[${questionIdx}].Type"]`).value === "1";

            if (isRadioButton) {
                const radios = input.closest('.options-container').querySelectorAll('input[type="radio"]');

              
                radios.forEach(radio => {
                    radio.checked = false;
                    radio.value = 'false'; 
                });

               
                input.checked = true;
                input.value = 'true'; 
            }
        }

        function removeOption(questionIdx, optionIdx) {
            const optionsContainer = document.getElementById(`options_${questionIdx}`);
            const optionToRemove = optionsContainer.querySelectorAll('.option-box')[optionIdx];
            optionsContainer.removeChild(optionToRemove);
        }

        function removeQuestion(questionIdx) {
            document.getElementById(`question_${questionIdx}`).remove();
        }

        function toggleAddOptionButton(questionIdx) {
            const typeSelect = document.querySelector(`#question_${questionIdx} .question-type select`);
            const addOptionButton = document.querySelector(`#question_${questionIdx} .add-option-button`);
            const openTextContainer = document.querySelector(`#question_${questionIdx} .open-text-container`);
            const optionsContainer = document.querySelector(`#question_${questionIdx} .options-container`);

            if (typeSelect.value === "2") {
                // OpenText
                addOptionButton.style.display = 'none';
                openTextContainer.style.display = 'block';
                clearOptions(optionsContainer);
            } else {
                // MultipleChoice or RadioButton: Show Add Option button
                addOptionButton.style.display = 'block';
                openTextContainer.style.display = 'none';
                resetCorrectAnswers(optionsContainer, typeSelect.value);
            }
        }

        function clearOptions(container) {
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }
        }

        function resetCorrectAnswers(container, questionType) {
            const inputs = container.querySelectorAll('input[type="radio"], input[type="checkbox"]');
            inputs.forEach(input => {
                input.checked = false;
                input.type = questionType === "1" ? "radio" : "checkbox"; 
                input.name = questionType === "1"
                    ? `Questions[${questionIndex}].IsCorrect`
                    : input.getAttribute('data-original-name');
                input.value = "false"; 
            });
        }
    </script>
}

<style>
    .questions-container {
        margin-top: 20px;
    }

    .question-box {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
    }

    .question-header {
        margin-bottom: 10px;
    }

        .question-header h4 {
            margin-bottom: 10px;
        }

    .question-type,
    .options-container {
        margin-top: 15px;
    }

    .option-box {
        margin-top: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .option-box input[type="text"] {
            width: 150px;
        }

        .option-box button {
            margin-left: 10px;
        }

    .add-option-button {
        margin-top: 10px;
    }

    .btn-sm {
        padding: 5px 10px;
    }

    .btn-danger {
        background-color: #e74c3c;
        border: none;
    }

    .btn-info {
        background-color: #3498db;
        border: none;
    }

    .form-control.option-input {
        width: 250px;
        display: inline-block;
    }

    .form-control {
        width: 300px;
        display: inline-block;
    }
</style>
